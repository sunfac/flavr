// === INSTRUCTIONS FOR REPLIT ‚Äî PROMPT 1 & PROMPT 2 (Shopping + Fridge Mode) ===

// GOAL: Ensure clean, accurate injection of quiz-derived values by centralizing the mapping logic.
// DO NOT embed mapping logic directly into the prompt strings.
// Do NOT alter the structure or purpose of either prompt ‚Äî this is an upgrade only.

// ------------------------------------
// 1. ‚úÖ MOVE MAPPING TO MAPPING FILE
// ------------------------------------
// Centralize the following mappings into a shared mapping file (e.g., `mappingUtils.ts`):

// üü¢ Difficulty Mapping ‚Äî from quizData.ambition
export const difficultyMap = {
  'Just get fed': 'Easy',
  'Simple & tasty': 'Easy',
  'Confident cook': 'Medium',
  'Ambitious chef': 'Hard',
  'Michelin effort': 'Hard'
};

// üü¢ Cooking Time ‚Äî ensure it's a numeric upper limit
export const getCookTime = (quizData) =>
  Number(quizData?.time?.value) || 30;

// üü¢ Budget Label Mapping (Shopping Mode ONLY) ‚Äî for realistic per-portion price references
export const budgetMap = {
  budget: 'Budget-friendly (¬£1‚Äì¬£3 per portion)',
  moderate: 'Moderate budget (¬£5‚Äì15 per portion)',
  premium: 'Premium (¬£15‚Äì25 per portion)',
  luxury: 'Luxury (¬£25+ per portion)'
};

// üü¢ Equipment Text ‚Äî map raw selections to readable text
export const formatEquipmentText = (quizData) => {
  const equipment = quizData?.equipment || [];
  return equipment.length > 0
    ? equipment.join(', ')
    : 'Standard kitchen setup';
};

// -----------------------------------------------
// 2. ‚úÖ USE THE MAPPED VALUES IN PROMPT CONSTRUCTION
// -----------------------------------------------
// BEFORE injecting variables into Prompt 1 or Prompt 2,
// resolve all mappings externally using:

import { difficultyMap, getCookTime, budgetMap, formatEquipmentText } from './mappingUtils';

const difficulty = difficultyMap[quizData.ambition] || 'Medium';
const cookTime = getCookTime(quizData);
const budgetText = budgetMap[quizData.budget] || 'Any budget';
const equipmentText = formatEquipmentText(quizData);

// Use these values wherever needed:
// - Prompt body text: Mood, Equipment, Difficulty, Budget, Cook Time
// - JSON return block

// ---------------------------------------------
// 3. ‚úÖ REMOVE INLINE MAPPING FROM PROMPT TEXT
// ---------------------------------------------
// REMOVE any of the following from inside the prompt string:
// - difficultyMap object
// - cookTime logic like quizData.time?.value
// - budget per portion descriptions
// - manual equipment text joins

// Instead, inject these values:
// ${difficulty}
// ${cookTime}
// ${budgetText}
// ${equipmentText}

// ---------------------------------------------
// 4. ‚úÖ STRUCTURE REMAINS THE SAME
// ---------------------------------------------
// DO NOT edit the prompt block logic or output format.
// Prompt 1 still returns:
// {
//   "recipes": [{ "title": "...", "description": "..." }]
// }
// Prompt 2 still returns:
// {
//   "title": "...", "description": "...", "ingredients": [...], ...
// }

// ‚úÖ These changes must apply to both Prompt 1 and Prompt 2 in:
// - Shopping Mode
- Fridge Mode

// ‚ùå These changes do NOT apply to:
// - Chef Assist Mode
// - Zest Chatbot
