It's frustrating when WebSocket connections immediately disconnect, especially with a new API. Based on the information you've provided and common patterns with the Gemini Live API (and similar streaming APIs), here's a breakdown of the likely reasons for your WebSocket disconnection after sending the setup message:

1. Incorrect setup message format or missing fields:

The Gemini Live API requires a BidiGenerateContentSetup message as the initial communication to configure the session. While your message has a model field, it's possible that:

It's not wrapped correctly: The setup object itself needs to be a value within a larger message structure. The documentation often shows examples like this:

JSON

{
  "setup": {
    "model": "models/gemini-2.0-flash-exp",
    "generationConfig": {
      "responseModalities": ["TEXT"] // Or "AUDIO" depending on your needs
    },
    "inputAudioTranscription": {},
    "outputAudioTranscription": {}
  }
}
Notice the inclusion of generationConfig and transcription settings. Even if you're not using audio, these fields might be expected or have default values that are implicitly required for a successful setup.

Missing required configuration: Depending on your intended use case (text-only, audio-in/text-out, etc.), there might be other mandatory fields within generationConfig or at the top level of the setup object. For instance, if you intend to receive audio, responseModalities: ["AUDIO"] is crucial.

Incorrect model name: While "models/gemini-2.0-flash-exp" seems plausible as an experimental model, double-check the exact, case-sensitive model names supported by the Live API. Sometimes, specific "live" or "native-audio" suffixes are necessary. For example, "gemini-2.0-flash-live-001" or "gemini-2.5-flash-preview-native-audio-dialog" are mentioned in the documentation.

Unsupported features: If you're trying to enable features like "affective dialog" or "proactive audio" that are not yet available for the specific model or API version you're using, it could lead to an "invalid frame payload data" error and disconnection.

2. Authentication/Permission Issues:

API Key validity: Ensure your YOUR_API_KEY is absolutely correct and has the necessary permissions to access the Gemini Live API. Even a small typo will cause immediate rejection.
Live API access: The Live API might have a different access control or require specific project configurations compared to other Gemini API endpoints. Double-check that your project is enabled for Live API usage.
Ephemeral authentication tokens: Some discussions suggest the Live API might use ephemeral authentication tokens, which implies your API key might be used to obtain a short-lived token that's then used for the WebSocket connection, rather than directly using the API key in the URL for the WebSocket. However, the documentation for wss://...key=YOUR_API_KEY suggests direct API key usage is supported for this specific endpoint. Still, it's worth noting as a potential advanced setup.
3. Protocol Mismatch / Unexpected Server Response:

Expecting an acknowledgment: The Live API often expects an acknowledgment (BidiGenerateContentSetupComplete) after the setup message. If your client isn't set up to immediately receive and process this acknowledgment, or if the server doesn't send it (due to an issue on its end or a misformatted setup), it might close the connection.
JSON formatting issues: Ensure your JSON is perfectly valid (no trailing commas, correct escaped characters, etc.). While usually less likely to cause immediate disconnection on a "setup" message unless critically malformed, it can be a subtle issue.
WebSocket client library behavior: Some WebSocket client libraries might have default behaviors (e.g., aggressive timeouts, strict protocol adherence) that could contribute to premature disconnections if the initial handshake or message exchange isn't perfectly aligned with the server's expectations.
Troubleshooting Steps and Recommendations:

Consult the Official Documentation (Again!): The "Live API - WebSockets API reference" is your best friend. Pay very close attention to the exact JSON structure for BidiGenerateContentSetup and any required fields within it, including generationConfig, responseModalities, inputAudioTranscription, and outputAudioTranscription.
Start with the Simplest Possible setup: Try an absolute minimal setup message, adding fields one by one to isolate the issue.
JSON

{
  "setup": {
    "model": "models/gemini-2.0-flash-exp",
    "generationConfig": {
      "responseModalities": ["TEXT"] 
    }
  }
}
If you intend to use audio, you'll need to include the inputAudioTranscription and outputAudioTranscription fields, even if empty, as per the documentation:
JSON

{
  "setup": {
    "model": "models/gemini-2.0-flash-exp",
    "generationConfig": {
      "responseModalities": ["AUDIO"] 
    },
    "inputAudioTranscription": {}, 
    "outputAudioTranscription": {}
  }
}
Check API Key Permissions: Verify in your Google Cloud Console or AI Studio that your API key is active and has the necessary permissions for the Generative Language API, specifically for the Live API.
Error Handling and Logging:
Client-side: Implement robust error handling for your WebSocket connection. Log any onclose events, including the close code and reason. This can provide crucial clues (e.g., a "policy violation" error code would point to permission issues, an "invalid frame payload" would point to message format).
Server-side (if possible): If there are any server-side logs or developer consoles available for your Google Cloud project, check them for errors related to your API calls.
Use a Known-Good Example (if available): If Google provides any official client-side examples for the Live API (e.g., in Python or JavaScript), examine their setup message structure and connection logic. This is often the quickest way to identify discrepancies in your implementation.
Network Inspection: Use your browser's developer tools (Network tab) or a tool like Wireshark to inspect the WebSocket frames being sent and received. Look for any explicit error messages from the server before the connection closes.
By systematically going through these points, you should be able to pinpoint why your WebSocket connection is disconnecting. The most common culprit is usually a slight mismatch in the expected setup message format or missing required configuration.