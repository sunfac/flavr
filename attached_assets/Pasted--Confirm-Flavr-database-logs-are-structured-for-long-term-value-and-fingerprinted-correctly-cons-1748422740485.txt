// ‚úÖ Confirm Flavr database logs are structured for long-term value and fingerprinted correctly
const Database = require("@replit/database");
const crypto = require("crypto");
const db = new Database();

// üîë Recalculate the expected fingerprint for comparison
function generateRecipeFingerprint(recipeOutput) {
  const contentString = [
    recipeOutput.title,
    recipeOutput.cuisine,
    recipeOutput.difficulty,
    recipeOutput.servings,
    recipeOutput.cookTime,
    recipeOutput.ingredients.join(","),
    recipeOutput.instructions.join(".")
  ].join("|");

  return crypto.createHash("sha256").update(contentString).digest("hex");
}

async function validateFlavrLogsWithFingerprintCheck() {
  const keys = await db.list("recipeLog:");
  const logs = await Promise.all(keys.map(key => db.get(key)));

  let passed = 0;
  let failed = 0;

  for (const [i, log] of logs.entries()) {
    const errors = [];

    // ‚úÖ Core meta
    if (!log.userId) errors.push("Missing userId");
    if (!log.mode) errors.push("Missing mode");
    if (!log.timestamp) errors.push("Missing timestamp");
    if (!log.gptVersion) errors.push("Missing gptVersion");

    // ‚úÖ Recipe card
    if (!log.recipeCardSelected?.title) errors.push("Missing recipeCardSelected.title");

    // ‚úÖ Recipe output
    const r = log.recipeOutput;
    if (
      !r || !r.title || !r.ingredients || !r.instructions ||
      typeof r.servings !== "number" || typeof r.cookTime !== "number"
    ) {
      errors.push("Incomplete or invalid recipeOutput");
    }

    // ‚úÖ Fingerprint validation
    if (!log.recipeFingerprint || log.recipeFingerprint.length !== 64) {
      errors.push("Missing or malformed recipeFingerprint");
    } else {
      const expectedFingerprint = generateRecipeFingerprint(r);
      if (log.recipeFingerprint !== expectedFingerprint) {
        errors.push("Stored fingerprint does not match calculated fingerprint");
      }
    }

    // ‚úÖ Intent
    const iData = log.intentData;
    if (
      !iData || !iData.mood || !iData.ambition || !iData.diet || !iData.time ||
      !iData.budget || !iData.equipment
    ) {
      errors.push("Incomplete intentData");
    }

    // ‚úÖ User behaviour
    const ua = log.userAction;
    if (!ua || typeof ua.saved !== "boolean" || !Array.isArray(ua.chatbotQueries)) {
      errors.push("Invalid userAction");
    }

    // ‚úÖ Summary
    if (errors.length === 0) {
      passed++;
    } else {
      failed++;
      console.log(`‚ùå Log #${i + 1} failed checks:`, errors);
    }
  }

  console.log("üìä Recipe Log Structure + Fingerprint Check Complete");
  console.log(`‚úîÔ∏è Passed: ${passed}`);
  console.log(`‚ùå Failed: ${failed}`);
}

validateFlavrLogsWithFingerprintCheck();